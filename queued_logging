
#if defined(ALLOW_DEBUG_PRINT)
#define DEBUG_PRINT(x, ...)                                                                                                  \
    do {                                                                                                                     \
        char __s[256] = {0};                                                                                                 \
        std::snprintf(__s, sizeof(__s), "\x1b[1m(%s:%d (tid:%-25zu), %-25s)\x1b[0m\x1b[1m\x1b[34m (%-15s) DEBUG:\x1b[0m " x, \
                    __FILE__, __LINE__, std::hash<std::thread::id>()(std::this_thread::get_id()),                            \
                    __func__, m_name.c_str(), ##__VA_ARGS__);                                                                \
        std::string __ss{__s, sizeof(__s)};                                                                                  \
        get_log_queue().push(std::move(__ss));                                                                               \
    } while(0)
#else
#define DEBUG_PRINT(x, ...) ((void)0)
#endif

#if defined(ALLOW_DEBUG2_PRINT)
#define DEBUG_PRINT2(x, ...)                                                                                                  \
    do {                                                                                                                      \
        char __s[256] = {0};                                                                                                  \
        std::snprintf(__s, sizeof(__s), "\x1b[1m(%s:%d (tid:%-25zu), %-25s)\x1b[0m\x1b[1m\x1b[31m (%-15s) DEBUG: \x1b[0m " x, \
                    __FILE__, __LINE__, std::hash<std::thread::id>()(std::this_thread::get_id()),                             \
                    __func__, m_name.c_str(), ##__VA_ARGS__);                                                                 \
        std::string __ss{__s, sizeof(__s)};                                                                                   \
        get_log_queue().push(std::move(__ss));                                                                                \
    } while(0)
#else
#define DEBUG_PRINT2(x, ...) ((void)0)
#endif
